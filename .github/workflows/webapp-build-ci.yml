name: webapp build ci

# branch condition
on:
  pull_request:
    branches: [ main ]

jobs:
  webapp-build:
    runs-on: ubuntu-latest

    # consume secrets
    env:
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      TEST_MYSQL_DATABASE: ${{ secrets.TEST_MYSQL_DATABASE }}
    
    # Steps to run the build
    steps:
    - uses: actions/checkout@v4.2.1
    
    # Setup python 
    - name: Set up Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.12'
    
    # we need to start mysql service so as to run pytest successfully
    - name: Start MySQL
      run: |
        sudo /etc/init.d/mysql start
        mysql -e "CREATE DATABASE IF NOT EXISTS $TEST_MYSQL_DATABASE;" -u$MYSQL_USER -p$MYSQL_PASSWORD

    # Install python dependencies 
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Run unit test cases for the webapp
    - name: Run tests
      run: pytest -v -s ./tests/test_app.py
    
    - name: Build application artifact
      run: |
        zip -r app.zip app.py requirements.txt models schemas tests database.py README.md app.service

    # Install Packer
    - name: Install Packer
      uses: hashicorp/setup-packer@main

    # Initialize Packer
    - name: Initialize Packer
      run: packer init webapp.pkr.hcl

    # Format Packer template
    - name: Format Packer template
      id: fmt
      run: packer fmt -check -diff .
      continue-on-error: true
    
    # create packer vars file on the fly as its gitignored for sensitivity
    - name: Create Packer variables file
      run: |
        echo 'artifact_path = "app.zip"' > variables.pkrvars.hcl
    
    # Validate Packer template
    - name: Validate Packer template
      id: validate                                        
      run: packer validate -var-file=variables.pkrvars.hcl webapp.pkr.hcl
    
    # add constraint for packer fmt
    - name: Check packer fmt results
      if: steps.fmt.outcome == 'failure'
      run: |
        echo "Packer template is not properly formatted. Please run 'packer fmt' and commit the changes."
        exit 1
    
    # add constraint for packer validate
    - name: Check packer validate results
      if: steps.validate.outcome == 'failure'
      run: |
        echo "Packer template validation failed. Please fix the errors and try again."
        exit 1
    
    # step for cleaning up the zip file that is created to run packer validate as it needs to look for app.zip in the working dir
    - name: Clean up
      run: rm app.zip